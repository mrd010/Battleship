{"version":3,"file":"app21abbde54e9ad9e2af50.js","mappings":"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","sources":["webpack://battleship/./src/scripts/Ship.js","webpack://battleship/./src/scripts/Gameboard.js","webpack://battleship/./src/scripts/Player.js","webpack://battleship/./src/scripts/Game.js","webpack://battleship/./src/scripts/GameController.js","webpack://battleship/./src/scripts/ElementCreator.js","webpack://battleship/./src/scripts/TemplateCreator.js","webpack://battleship/./src/scripts/DisplayController.js","webpack://battleship/./src/index.js"],"sourcesContent":["class Ship {\n  #name;\n\n  #length;\n\n  #hitCount;\n\n  #placed;\n\n  constructor(shipDetails) {\n    this.#name = shipDetails.name;\n    this.#length = shipDetails.length;\n    this.#hitCount = 0;\n    this.#placed = false;\n  }\n\n  getName() {\n    return this.#name;\n  }\n\n  getLength() {\n    return this.#length;\n  }\n\n  getHitCount() {\n    return this.#hitCount;\n  }\n\n  isPlaced() {\n    return this.#placed;\n  }\n\n  fortify() {\n    this.#placed = true;\n  }\n\n  hit() {\n    this.#hitCount += 1;\n  }\n\n  isSunk() {\n    return this.#hitCount >= this.#length;\n  }\n}\n\nexport default Ship;\n","import Ship from './Ship';\n\nclass Gameboard {\n  //   2d array of board\n  #board;\n\n  #ships;\n\n  #shotsReceived;\n\n  #initialize2DBoard() {\n    for (let x = 0; x < 10; x += 1) {\n      this.#board[x] = [];\n      for (let y = 0; y < 10; y += 1) {\n        this.#board[x][y] = null;\n      }\n    }\n  }\n\n  constructor() {\n    this.#shotsReceived = [];\n    this.#ships = [];\n    this.#board = [];\n    this.#initialize2DBoard();\n  }\n\n  getBoard() {\n    return this.#board;\n  }\n\n  getSquare([x, y]) {\n    return this.#board[x][y];\n  }\n\n  setupShips(settings) {\n    this.#ships = settings.map((shipDetail) => new Ship(shipDetail));\n  }\n\n  #isCoordinateInBoard([x, y]) {\n    return x >= 0 && x < this.#board.length && y >= 0 && y < this.#board.length;\n  }\n\n  #areValidSquares(coordinatesArray) {\n    const surroundSquares = [\n      [0, -1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n      [0, 1],\n      [-1, 1],\n      [-1, 0],\n      [-1, -1],\n    ];\n\n    // check if all coordinates are Valid in board\n    return coordinatesArray.every((coordinate) => {\n      const x = coordinate[0];\n      const y = coordinate[1];\n\n      return (\n        this.#isCoordinateInBoard(coordinate) &&\n        this.#board[x][y] === null &&\n        surroundSquares.every((square) => {\n          if (this.#isCoordinateInBoard([x + square[0], y + square[1]])) {\n            return this.#board[x + square[0]][y + square[1]] === null;\n          }\n          return true;\n        })\n      );\n    });\n  }\n\n  #isValidPlacement(shipLength, coordinatesArray) {\n    return (\n      shipLength <= 9 &&\n      shipLength === coordinatesArray.length &&\n      this.#areValidSquares(coordinatesArray)\n    );\n  }\n\n  placeShip(shipName, shipLength, coordinatesArray) {\n    if (this.#isValidPlacement(shipLength, coordinatesArray)) {\n      // if squares are Valid\n      const currentShip = this.#ships.find(\n        (ship) => ship.getName() === shipName && ship.getLength() === shipLength && !ship.isPlaced()\n      );\n      if (currentShip) {\n        coordinatesArray.forEach((coordinate) => {\n          // place ship in square\n          this.#board[coordinate[0]][coordinate[1]] = currentShip;\n        });\n        currentShip.fortify();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isValidShot([x, y]) {\n    return (\n      this.#isCoordinateInBoard([x, y]) &&\n      !this.#shotsReceived.some((shot) => shot.coordinates[0] === x && shot.coordinates[1] === y)\n    );\n  }\n\n  #hitShot([x, y]) {\n    const targetShip = this.#board[x][y];\n    targetShip.hit();\n    this.#shotsReceived.push({ coordinates: [x, y], wasSuccess: true });\n    return { wasSuccess: true, destroyed: targetShip.isSunk() };\n  }\n\n  #missShot([x, y]) {\n    this.#shotsReceived.push({ coordinates: [x, y], wasSuccess: false });\n    return { wasSuccess: false };\n  }\n\n  receiveAttack([x, y]) {\n    // if coordinates out of box or not on a ship miss shot\n    if (this.#board[x][y] === null) {\n      return this.#missShot([x, y]);\n    }\n    //  if coordinates are on a ship register shop as success and inform if ship is sunken\n    return this.#hitShot([x, y]);\n  }\n\n  allShipsPlaced() {\n    return this.#ships.every((ship) => ship.isPlaced());\n  }\n\n  allShipsSunken() {\n    return this.#ships.every((ship) => ship.isSunk());\n  }\n\n  randomPlaceShips() {\n    for (let index = this.#ships.length - 1; index >= 0; index -= 1) {\n      const ship = this.#ships[index];\n\n      while (!ship.isPlaced()) {\n        const ordination = Math.random() > 0.5 ? 'v' : 'h';\n        const num1 = Math.floor(Math.random() * 10);\n        const num2 = Math.floor(Math.random() * 10 - ship.getLength() + 1);\n        const coordinates = [];\n        for (let i = 0; i < ship.getLength(); i += 1) {\n          if (ordination === 'h') {\n            coordinates.push([num1, num2 + i]);\n          } else {\n            coordinates.push([num2 + i, num1]);\n          }\n        }\n\n        this.placeShip(ship.getName(), ship.getLength(), coordinates);\n      }\n    }\n    return this.#board;\n  }\n}\n\nexport default Gameboard;\n","import Gameboard from './Gameboard';\n\nclass Player {\n  #gameboard;\n\n  #isAI;\n\n  constructor(type, shipsSetup) {\n    this.#gameboard = new Gameboard();\n    this.#gameboard.setupShips(shipsSetup);\n    this.#isAI = false;\n    if (type === 'ai') {\n      this.#isAI = true;\n      console.log(this.#gameboard.randomPlaceShips());\n    }\n  }\n\n  isAI() {\n    return this.#isAI;\n  }\n\n  getGameboard() {\n    return this.#gameboard;\n  }\n\n  placeShip(shipName, shipLength, coordinates) {\n    return this.#gameboard.placeShip(shipName, shipLength, coordinates);\n  }\n\n  receiveAttack(coordinate) {\n    if (this.#gameboard.isValidShot(coordinate)) {\n      const shot = this.#gameboard.receiveAttack(coordinate);\n      return { fired: true, shot, win: shot.destroyed ? this.#gameboard.allShipsSunken() : false };\n    }\n\n    return { fired: false };\n  }\n\n  isLost() {\n    return this.#gameboard.allShipsSunken();\n  }\n}\n\nexport default Player;\n","import Player from './Player';\n\nclass Game {\n  #player1;\n\n  #player2;\n\n  #turn;\n\n  #shipsSetup;\n\n  constructor(shipsSetup) {\n    this.#player1 = null;\n    this.#player2 = null;\n    this.#shipsSetup = shipsSetup;\n  }\n\n  // create and assign a new player to game\n  addPlayer(playerType) {\n    const pl = new Player(playerType, this.#shipsSetup);\n    // fill in  player 1 first\n    if (this.#player1 === null) {\n      this.#player1 = pl;\n      return this.#player1;\n    }\n    // if first player was in fill player 2\n    if (this.#player2 === null) {\n      this.#player2 = pl;\n      return this.#player2;\n    }\n\n    // if max players reached its null\n    return null;\n  }\n\n  player(number) {\n    if (number === 1) {\n      return this.#player1;\n    }\n    if (number === 2) {\n      return this.#player2;\n    }\n    return null;\n  }\n\n  placeShipFor(playerNumber, shipName, shipLength, coordinates) {\n    if (this.player(playerNumber) !== null) {\n      return this.player(playerNumber).placeShip(shipName, shipLength, coordinates);\n    }\n\n    return false;\n  }\n\n  allShipsPlaced(playerNum) {\n    return this.player(playerNum).getGameboard().allShipsPlaced();\n  }\n\n  playTurn(shotCoordinates) {\n    const battleReport = { playerShotStatus: 'invalid', aiShots: [], winner: 0 };\n    const attackResult = this.#player2.receiveAttack([shotCoordinates.x, shotCoordinates.y]);\n    if (attackResult.fired) {\n      if (attackResult.shot.wasSuccess) {\n        battleReport.playerShotStatus = 'hit';\n        if (attackResult.win) {\n          battleReport.winner = 1;\n        }\n        return battleReport;\n      }\n      battleReport.playerShotStatus = 'miss';\n      let aiAttackResult;\n      do {\n        let x;\n        let y;\n        do {\n          x = Math.floor(Math.random() * 10);\n          y = Math.floor(Math.random() * 10);\n          aiAttackResult = this.#player1.receiveAttack([x, y]);\n        } while (!aiAttackResult.fired);\n        battleReport.aiShots.push({\n          coordinate: [x, y],\n          shotStatus: aiAttackResult.shot.wasSuccess ? 'hit' : 'miss',\n        });\n        if (aiAttackResult.win) {\n          battleReport.winner = 2;\n        }\n      } while (aiAttackResult.shot.wasSuccess && battleReport.winner === 0);\n    }\n\n    return battleReport;\n  }\n}\n\nexport default Game;\n","import Game from './Game';\n\nconst SHIPS_SETUP = [\n  { name: 'Patrol Boat', length: 2 },\n  { name: 'Patrol Boat', length: 2 },\n  { name: 'Patrol Boat', length: 2 },\n  { name: 'Patrol Boat', length: 2 },\n  { name: 'Destroyer', length: 3 },\n  { name: 'Destroyer', length: 3 },\n  { name: 'Submarine', length: 3 },\n  { name: 'Battleship', length: 4 },\n  { name: 'Battleship', length: 4 },\n  { name: 'Carrier', length: 5 },\n];\n\nexport const getGameDefaults = function getGameDefaults() {\n  return { shipsSetup: SHIPS_SETUP };\n};\n\nexport const setupGame = function setupGame() {\n  const game = new Game(SHIPS_SETUP);\n  game.addPlayer('p');\n  game.addPlayer('ai');\n  return game;\n};\n","export const isOverflown = ({ clientWidth, clientHeight, scrollWidth, scrollHeight }) =>\n  scrollHeight > clientHeight || scrollWidth > clientWidth;\n// ##############################################################\nexport const HTMLtoText = function HTMLtoText(htmlCode) {\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = htmlCode;\n  return tempDiv.textContent;\n};\n\n// ############################################################################################################################################################\nexport function nameToId(name) {\n  return name.toLowerCase().split(' ').join('-');\n}\n\n// ############################################################################################################################################################\nexport function appendChildren(element, children) {\n  children.forEach((child) => element.appendChild(child));\n}\n\n// ############################################################################################################################################################\nexport function createElement(elementTag, elementClass, ...attributes) {\n  const element = document.createElement(elementTag);\n  if (elementClass !== undefined) {\n    element.classList.add(elementClass);\n  }\n\n  attributes.forEach((attribute) => {\n    element.setAttribute(attribute[0], attribute[1]);\n  });\n\n  return element;\n}\n\n// ############################################################################################################################################################\nexport function createElementWithClasses(elementTag, elementClassNames, ...attributes) {\n  const element = document.createElement(elementTag);\n  if (elementClassNames !== undefined) {\n    element.setAttribute('class', elementClassNames);\n  }\n\n  attributes.forEach((attribute) => {\n    element.setAttribute(attribute[0], attribute[1]);\n  });\n\n  return element;\n}\n\n// ############################################################################################################################################################\nexport const createContainer = function createContainer(classNames, id) {\n  const container = createElement('div', undefined);\n  if (classNames !== undefined) {\n    container.setAttribute('class', classNames);\n  }\n  if (id !== undefined) {\n    container.setAttribute('id', id);\n  }\n\n  return container;\n};\n\n// ############################################################################################################################################################\n\nexport function createMaterialIcon(style, className, name) {\n  const icon = createElement('span', className);\n  icon.classList.add(`material-symbols-${style}`);\n  icon.textContent = ` ${name} `;\n  return icon;\n}\n// ############################################################################################################################################################\n\nexport const createWeatherIcon = function createWeatherIcon(name, className = '') {\n  const icon = createElement('i', 'wi');\n  icon.classList.add(`wi-${name}`);\n  if (className !== '') {\n    icon.classList.add(className);\n  }\n  return icon;\n};\n// ############################################################################################################################################################\n\nexport const getTransitionTime = function getTransitionTime(element) {\n  return Number(getComputedStyle(element).getPropertyValue('transition-duration').slice(0, -1));\n};\n","import { appendChildren, createContainer, createElementWithClasses } from './ElementCreator';\n\n// ####################################################################################\nexport const createStartScreen = function createStartScreen() {\n  const startScreen = createContainer('grid h-screen items-center justify-center', 'start-screen');\n  const startBtn = createElementWithClasses(\n    'button',\n    'rounded-full bg-amber-400 px-4 py-2 font-bold text-xl text-slate-900 hover:bg-amber-300 active:bg-amber-500',\n    ['id', 'start-button']\n  );\n  startBtn.textContent = 'Start Battleship';\n  startScreen.appendChild(startBtn);\n  return startScreen;\n};\n\n// ####################################################################################\nconst createPlayerField = function createPlayerField() {\n  const playerField = createContainer('grid grid-rows-[auto_minmax(0,1fr)] self-stretch gap-4');\n  // header\n  const playerFieldHeader = createContainer('field-header p-4 m-4');\n  appendChildren(playerFieldHeader, [\n    createElementWithClasses('h2', 'title text-center text-slate-50 text-2xl font-extrabold'),\n    createElementWithClasses('h3', 'desc text-center text-slate-100 text-md font-bold'),\n  ]);\n  playerField.appendChild(playerFieldHeader);\n\n  // player board\n  const playerBoard = createContainer(\n    `game-board grid place-self-center border-2 rounded-md border-slate-200`\n  );\n  playerBoard.style.gridTemplateRows = `repeat(10, minmax(0, 1fr))`;\n  playerBoard.style.gridTemplateColumns = `repeat(10, minmax(0, 1fr))`;\n  for (let row = 0; row < 10; row += 1) {\n    for (let col = 0; col < 10; col += 1) {\n      const gridCell = createElementWithClasses(\n        'button',\n        'w-10 h-10 bg-slate-50/5 border-[1px] border-slate-50/10',\n        ['data-row', row],\n        ['data-col', col]\n      );\n      gridCell.style.gridArea = `${row + 1} / ${col + 1} / span 1 / span 1`;\n      playerBoard.appendChild(gridCell);\n    }\n  }\n  playerField.appendChild(playerBoard);\n  return playerField;\n};\n\n// ####################################################################################\nexport const createPlayScreen = function createPlayScreen(shipsSetup) {\n  // play screen page ########################\n  const playScreen = createContainer(\n    'grid grid-rows-[auto_auto_1fr] grid grid-cols-[1fr_1fr] min-h-screen items-start',\n    'play-screen'\n  );\n  // header\n  const playScreenHeader = createElementWithClasses(\n    'header',\n    'p-2 bg-amber-400 border-b-2 col-span-2'\n  );\n  const playScreenHeaderTitle = createElementWithClasses(\n    'h1',\n    'text-slate-900 font-extrabold font-display text-4xl text-center'\n  );\n  playScreenHeaderTitle.textContent = 'Battleship';\n  playScreenHeader.appendChild(playScreenHeaderTitle);\n  playScreen.appendChild(playScreenHeader);\n\n  // ships select menu section ########################\n  const shipsMenu = createContainer(\n    'flex flex-wrap col-span-2 flex-row p-4 gap-3 border-b-2',\n    'ships-menu'\n  );\n  // create a ship button for each ship in shipsSetup\n  // with ship name and ship length provided\n  // each ship takes length amount of grid cells\n  shipsSetup.forEach((ship, index) => {\n    const shipBtn = createContainer('ship-button grid items-stretch rounded-sm');\n    const shipRadioBtn = createElementWithClasses(\n      'input',\n      'peer hidden',\n      ['type', 'radio'],\n      ['id', `ship${index}`],\n      ['name', `ships`],\n      ['data-ship-name', ship.name],\n      ['data-ship-length', ship.length]\n    );\n    const shipLabel = createElementWithClasses(\n      'label',\n      `grid border-2 peer-checked:ring-2 peer-disabled:opacity-30 opacity-80 peer-checked:opacity-100 cursor-pointer ring-red-500 rounded-md overflow-hidden relative text-slate-50 text-sm text-center`,\n      ['for', `ship${index}`],\n      ['data-ship-name', ship.name],\n      ['data-ship-length', ship.length]\n    );\n    shipLabel.style.height = `2.5rem`;\n    shipLabel.style.width = `${2.5 * ship.length}rem`;\n    shipLabel.style.gridTemplateColumns = `repeat(${ship.length}, minmax(0, 1fr))`;\n    shipLabel.style.gridTemplateRows = `repeat(1, minmax(0, 1fr))`;\n    const shipName = createContainer(\n      'ship-name text-slate-50 z-10 text-center absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 uppercase'\n    );\n    shipName.textContent = ship.name;\n    shipLabel.appendChild(shipName);\n    // create ship cell parts with length amount\n    for (let i = 0; i < ship.length; i += 1) {\n      shipLabel.appendChild(createContainer('ship-part odd:bg-slate-700 even:bg-slate-600'));\n    }\n\n    appendChildren(shipBtn, [shipRadioBtn, shipLabel]);\n    shipsMenu.appendChild(shipBtn);\n  });\n  playScreen.appendChild(shipsMenu);\n\n  // create play fields section ####################################\n  // player field\n  const playerField = createPlayerField();\n  playerField.classList.add('border-r-2');\n  playerField.setAttribute('id', 'player-field');\n  playerField.querySelector('.field-header .title').textContent = 'Place your ships in board';\n  playerField.querySelector('.field-header .desc').textContent =\n    'Select Ship and Place it . Press R for rotate';\n  // opponent board\n  const opponentField = createPlayerField();\n  opponentField.setAttribute('id', 'opponent-field');\n  opponentField.querySelector('.field-header .title').textContent = 'Player2 (AI)';\n  opponentField.classList.add('opacity-20');\n  // append\n  appendChildren(playScreen, [playerField, opponentField]);\n\n  return playScreen;\n};\n// ##################################################################\nexport const createGameOverScreen = function createGameOverScreen(winnerName) {\n  const bgOverlay = createContainer('fixed w-full h-full bg-slate-900/50 grid items-center');\n  const gameOverContainer = createContainer('bg-red-700 text-slate-50 border-2', 'game-over p-4');\n  const title = createElementWithClasses(\n    'h3',\n    'title text-xl font-bold text-center font-display p-2'\n  );\n  title.textContent = 'Game Over';\n  const desc = createElementWithClasses('p', 'desc text-center text-2xl font-bold p-2');\n  desc.textContent = `${winnerName} won`;\n  appendChildren(gameOverContainer, [title, desc]);\n  bgOverlay.appendChild(gameOverContainer);\n  return bgOverlay;\n};\n","import { getGameDefaults, setupGame } from './GameController';\nimport { createGameOverScreen, createPlayScreen, createStartScreen } from './TemplateCreator';\n\nconst gameOver = function gameOverScreen(screen, winnerName) {\n  const gameOverOverlay = createGameOverScreen(winnerName);\n  screen.appendChild(gameOverOverlay);\n};\n// #############################################################\nconst getSquareCoordinates = function getSquareCoordinates(square) {\n  return { x: Number(square.getAttribute('data-col')), y: Number(square.getAttribute('data-row')) };\n};\n// #############################################################\nconst getBoardCell = function getBoardCell(board, coordinates) {\n  return board.children.item(coordinates.y * 10 + coordinates.x);\n};\n// #############################################################\nconst prepareNextPhase = function prepareNextPhase(playScreen, game) {\n  playScreen.classList.replace('grid-rows-[auto_auto_1fr]', 'grid-rows-[auto_1fr]');\n  // hide ships menu\n  playScreen.querySelector('#ships-menu').remove();\n\n  // show opponent board\n  const opponentField = playScreen.querySelector('#opponent-field');\n  const opponentBoard = opponentField.querySelector('.game-board');\n  opponentField.classList.remove('opacity-20');\n  //\n  const playerField = playScreen.querySelector('#player-field');\n  playerField.querySelector('.field-header .title').textContent = 'Player1';\n  playerField.querySelector('.field-header .desc').textContent = '';\n  const playerBoard = playerField.querySelector('.game-board');\n\n  opponentBoard.querySelectorAll('button').forEach((boardBtn) => {\n    boardBtn.classList.add('hover:bg-slate-50/20');\n    boardBtn.addEventListener('click', () => {\n      const coordinate = getSquareCoordinates(boardBtn);\n      const battleResult = game.playTurn(coordinate);\n      if (battleResult.playerShotStatus !== 'invalid') {\n        if (battleResult.playerShotStatus === 'hit') {\n          boardBtn.classList.add('hit');\n        } else {\n          boardBtn.classList.add('miss');\n        }\n      }\n\n      battleResult.aiShots.forEach((shot) => {\n        const target = getBoardCell(playerBoard, { x: shot.coordinate[0], y: shot.coordinate[1] });\n        if (shot.shotStatus === 'hit') {\n          target.classList.add('hit');\n        } else {\n          target.classList.add('miss');\n        }\n      });\n\n      if (battleResult.winner > 0) {\n        gameOver(playScreen, battleResult.winner === 1 ? 'Player' : 'Opponent');\n      }\n    });\n  });\n};\n// #############################################################\nconst createShipPlaceholder = function createShipPlaceholder(\n  shipLabel,\n  sampleCell,\n  orientation,\n  coordinates\n) {\n  // 1.clone ship label element\n  const shipPlaceholder = shipLabel.cloneNode();\n  shipPlaceholder.classList.add('placeholder');\n  // 2.correct placeholder size and position\n  const sampleSize = getComputedStyle(sampleCell).getPropertyValue('width').slice(0, -2);\n  const shipSize = Number(shipPlaceholder.getAttribute('data-ship-length'));\n  const shipWidth = orientation === 'h' ? shipSize : 1;\n  const shipHeight = orientation === 'v' ? shipSize : 1;\n  // size\n  // make width and height of placeholder according to board cells size and ship length and orientation of placeholder\n  shipPlaceholder.style.width = `${sampleSize * shipWidth}px`;\n  shipPlaceholder.style.height = `${sampleSize * shipHeight}px`;\n  // position\n  // place placeholder in board according to its size and pointer coordinates\n  // also position cant be out of board\n  const startPointCol = Math.min(\n    11 - shipWidth,\n    Math.max(1, coordinates.x + 1 - Math.floor(shipWidth / 2))\n  );\n  const startPointRow = Math.min(\n    11 - shipHeight,\n    Math.max(1, coordinates.y + 1 - Math.floor(shipHeight / 2))\n  );\n\n  // place holder spans from starting point to its length\n  shipPlaceholder.style.gridRowStart = `${startPointRow}`;\n  shipPlaceholder.style.gridColumnStart = `${startPointCol}`;\n  shipPlaceholder.style.gridRowEnd = `span ${shipHeight}`;\n  shipPlaceholder.style.gridColumnEnd = `span ${shipWidth}`;\n\n  // 3.make text inside according to ship name\n  const name = shipLabel.firstChild.cloneNode(true);\n  shipPlaceholder.appendChild(name);\n  shipPlaceholder.removeAttribute('for');\n\n  // 4.text orientation changes on rotate\n  shipPlaceholder.style.writingMode = orientation === 'h' ? 'horizontal-tb' : 'vertical-rl';\n\n  // 5.send placeholder behind board and add colors\n  shipPlaceholder.classList.add('-z-10');\n  shipPlaceholder.classList.add('bg-gray-500/50');\n\n  return shipPlaceholder;\n};\n\n// #############################################################\nconst showShipPlaceholder = function showShipPlaceholder(board, placeholder) {\n  if (board.querySelector('.placeholder')) {\n    // if there is ship showing in board remove it first\n    board.querySelector('.placeholder').remove();\n  }\n  // then show new one on board\n  board.appendChild(placeholder);\n};\n\n// #############################################################\nconst hideShipPlaceholder = function hideShipPlaceholder(placeholder) {\n  if (placeholder !== null) {\n    // if there is ship showing in board remove it\n    placeholder.remove();\n  }\n  return null;\n};\n\n// #############################################################\nconst getShipGridCells = function getShipGridCells(shipElement, orientation) {\n  const startPointX = Number(shipElement.style.gridColumnStart);\n  const startPointY = Number(shipElement.style.gridRowStart);\n  const shipLength = Number(shipElement.getAttribute('data-ship-length'));\n\n  const coordinates = [];\n  for (let i = 0; i < shipLength; i += 1) {\n    if (orientation === 'h') {\n      coordinates.push([startPointX - 1 + i, startPointY - 1]);\n    } else {\n      coordinates.push([startPointX - 1, startPointY - 1 + i]);\n    }\n  }\n\n  return coordinates;\n};\n// #############################################################\nconst loadPlayScreen = function loadPlayScreen() {\n  // setup game\n  const game = setupGame();\n  // create play screen with default settings\n  const gameDefaults = getGameDefaults();\n  const playScreen = createPlayScreen(gameDefaults.shipsSetup);\n\n  // hide starting screen page\n  document.getElementById('start-screen').remove();\n  document.body.appendChild(playScreen);\n  // activate ship for placement event\n  let activeShipBtn = null;\n  let activeShipLabel = null;\n  playScreen.querySelectorAll('#ships-menu .ship-button').forEach((shipBtn) => {\n    // mark activated ship in ships menu for placing\n    shipBtn.querySelector('input').addEventListener('change', (e) => {\n      if (e.target.checked) {\n        activeShipBtn = e.target;\n        activeShipLabel = shipBtn.querySelector('label');\n      }\n    });\n  });\n\n  // a copy of ship label which activated. we're gonna place it on board\n  let shipPlaceholder = null;\n  // coordinates of board cell which mouse is over it\n  let coordinates = { x: 0, y: 0 };\n  // rotation of ship indicator\n  let orientation = 'h';\n\n  const playerBoard = playScreen.querySelector('#player-field .game-board');\n  playerBoard.querySelectorAll('button').forEach((boardBtn) => {\n    boardBtn.addEventListener('mouseenter', () => {\n      // when hover on any board cell and there is a ship selected for place\n      if (activeShipLabel !== null) {\n        // save current coordinates\n        coordinates = getSquareCoordinates(boardBtn);\n        // create a placeholder with in current coordinates and selected ship\n        shipPlaceholder = createShipPlaceholder(\n          activeShipLabel,\n          boardBtn,\n          orientation,\n          coordinates\n        );\n        showShipPlaceholder(playerBoard, shipPlaceholder);\n      }\n    });\n\n    boardBtn.addEventListener('click', () => {\n      // placing placeholder when its on board and clicked\n\n      if (shipPlaceholder !== null) {\n        const isPlaced = game.placeShipFor(\n          1,\n          shipPlaceholder.getAttribute('data-ship-name'),\n          Number(shipPlaceholder.getAttribute('data-ship-length')),\n          getShipGridCells(shipPlaceholder, orientation)\n        );\n        // if placed leave ship on board\n        if (isPlaced) {\n          activeShipBtn.setAttribute('disabled', true);\n          activeShipBtn.checked = false;\n          shipPlaceholder.classList.remove('placeholder');\n          // reset\n          activeShipBtn = null;\n          activeShipLabel = null;\n          shipPlaceholder = null;\n\n          // check if all player ships placed\n          if (game.allShipsPlaced(1)) {\n            prepareNextPhase(playScreen, game);\n          }\n        }\n      }\n    });\n  });\n\n  window.addEventListener('keydown', (e) => {\n    if (e.code === 'KeyR' && activeShipLabel !== null) {\n      // rotate placeholder when press R\n      e.preventDefault();\n      orientation = orientation === 'h' ? 'v' : 'h';\n      if (shipPlaceholder !== null) {\n        shipPlaceholder = createShipPlaceholder(\n          activeShipLabel,\n          playerBoard.firstChild,\n          orientation,\n          coordinates\n        );\n        showShipPlaceholder(playerBoard, shipPlaceholder);\n      }\n    }\n  });\n\n  playerBoard.addEventListener('mouseleave', () => {\n    // hide placeholder when leaving board area\n    shipPlaceholder = hideShipPlaceholder(shipPlaceholder);\n  });\n};\n\n// #############################################################\nconst initDisplay = function initDisplay() {\n  // create start screen\n  document.body.setAttribute('class', 'bg-gradient-to-b h-screen from-slate-950 to-slate-900');\n  const startScreen = createStartScreen();\n  document.body.appendChild(startScreen);\n\n  // start button loads game\n  startScreen.querySelector('#start-button').addEventListener('click', loadPlayScreen);\n};\n\n// #############################################################\nexport default initDisplay;\n","import './style.css';\nimport initDisplay from './scripts/DisplayController';\n\ninitDisplay();\n"],"names":["constructor","shipDetails","this","name","length","getName","getLength","getHitCount","isPlaced","fortify","hit","isSunk","x","y","getBoard","getSquare","_ref","setupShips","settings","map","shipDetail","Ship","_ref2","coordinatesArray","surroundSquares","every","coordinate","square","shipLength","placeShip","shipName","currentShip","find","ship","forEach","isValidShot","_ref3","some","shot","coordinates","_ref4","targetShip","push","wasSuccess","destroyed","_ref5","receiveAttack","_ref6","allShipsPlaced","allShipsSunken","randomPlaceShips","index","ordination","Math","random","num1","floor","num2","i","type","shipsSetup","Gameboard","console","log","isAI","getGameboard","fired","win","isLost","addPlayer","playerType","pl","Player","player","number","placeShipFor","playerNumber","playerNum","playTurn","shotCoordinates","battleReport","playerShotStatus","aiShots","winner","attackResult","aiAttackResult","shotStatus","SHIPS_SETUP","appendChildren","element","children","child","appendChild","createElementWithClasses","elementTag","elementClassNames","document","createElement","undefined","setAttribute","_len2","arguments","attributes","Array","_key2","attribute","createContainer","classNames","id","container","elementClass","classList","add","_len","_key","createPlayerField","playerField","playerFieldHeader","playerBoard","style","gridTemplateRows","gridTemplateColumns","row","col","gridCell","gridArea","getSquareCoordinates","Number","getAttribute","createShipPlaceholder","shipLabel","sampleCell","orientation","shipPlaceholder","cloneNode","sampleSize","getComputedStyle","getPropertyValue","slice","shipSize","shipWidth","shipHeight","width","height","startPointCol","min","max","startPointRow","gridRowStart","gridColumnStart","gridRowEnd","gridColumnEnd","firstChild","removeAttribute","writingMode","showShipPlaceholder","board","placeholder","querySelector","remove","loadPlayScreen","game","Game","setupGame","playScreen","playScreenHeader","playScreenHeaderTitle","textContent","shipsMenu","shipBtn","shipRadioBtn","opponentField","createPlayScreen","getElementById","body","activeShipBtn","activeShipLabel","querySelectorAll","addEventListener","e","target","checked","boardBtn","shipElement","startPointX","startPointY","getShipGridCells","replace","opponentBoard","battleResult","item","screen","winnerName","gameOverOverlay","bgOverlay","gameOverContainer","title","desc","createGameOverScreen","gameOver","prepareNextPhase","window","code","preventDefault","startScreen","startBtn","createStartScreen","initDisplay"],"sourceRoot":""}